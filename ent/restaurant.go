// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/bamboooo-dev/meshi-api/ent/restaurant"
)

// Restaurant is the model entity for the Restaurant schema.
type Restaurant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Restaurant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case restaurant.FieldID:
			values[i] = new(sql.NullInt64)
		case restaurant.FieldName, restaurant.FieldURL, restaurant.FieldPhone, restaurant.FieldPrice:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Restaurant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Restaurant fields.
func (r *Restaurant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case restaurant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case restaurant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case restaurant.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case restaurant.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				r.Phone = value.String
			}
		case restaurant.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				r.Price = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Restaurant.
// Note that you need to call Restaurant.Unwrap() before calling this method if this Restaurant
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Restaurant) Update() *RestaurantUpdateOne {
	return (&RestaurantClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Restaurant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Restaurant) Unwrap() *Restaurant {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Restaurant is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Restaurant) String() string {
	var builder strings.Builder
	builder.WriteString("Restaurant(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", url=")
	builder.WriteString(r.URL)
	builder.WriteString(", phone=")
	builder.WriteString(r.Phone)
	builder.WriteString(", price=")
	builder.WriteString(r.Price)
	builder.WriteByte(')')
	return builder.String()
}

// Restaurants is a parsable slice of Restaurant.
type Restaurants []*Restaurant

func (r Restaurants) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
