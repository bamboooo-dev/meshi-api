// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/bamboooo-dev/meshi-api/ent/like"
	"github.com/bamboooo-dev/meshi-api/ent/restaurant"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// LikeEdge is the edge representation of Like.
type LikeEdge struct {
	Node   *Like  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// LikeConnection is the connection containing edges to Like.
type LikeConnection struct {
	Edges      []*LikeEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// LikePaginateOption enables pagination customization.
type LikePaginateOption func(*likePager) error

// WithLikeOrder configures pagination ordering.
func WithLikeOrder(order *LikeOrder) LikePaginateOption {
	if order == nil {
		order = DefaultLikeOrder
	}
	o := *order
	return func(pager *likePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLikeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLikeFilter configures pagination filter.
func WithLikeFilter(filter func(*LikeQuery) (*LikeQuery, error)) LikePaginateOption {
	return func(pager *likePager) error {
		if filter == nil {
			return errors.New("LikeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type likePager struct {
	order  *LikeOrder
	filter func(*LikeQuery) (*LikeQuery, error)
}

func newLikePager(opts []LikePaginateOption) (*likePager, error) {
	pager := &likePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLikeOrder
	}
	return pager, nil
}

func (p *likePager) applyFilter(query *LikeQuery) (*LikeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *likePager) toCursor(l *Like) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *likePager) applyCursors(query *LikeQuery, after, before *Cursor) *LikeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultLikeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *likePager) applyOrder(query *LikeQuery, reverse bool) *LikeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultLikeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultLikeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Like.
func (l *LikeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LikePaginateOption,
) (*LikeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLikePager(opts)
	if err != nil {
		return nil, err
	}

	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}

	conn := &LikeConnection{Edges: []*LikeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := l.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := l.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	l = pager.applyCursors(l, after, before)
	l = pager.applyOrder(l, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		l = l.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		l = l.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := l.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Like
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Like {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Like {
			return nodes[i]
		}
	}

	conn.Edges = make([]*LikeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &LikeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// LikeOrderField defines the ordering field of Like.
type LikeOrderField struct {
	field    string
	toCursor func(*Like) Cursor
}

// LikeOrder defines the ordering of Like.
type LikeOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *LikeOrderField `json:"field"`
}

// DefaultLikeOrder is the default ordering of Like.
var DefaultLikeOrder = &LikeOrder{
	Direction: OrderDirectionAsc,
	Field: &LikeOrderField{
		field: like.FieldID,
		toCursor: func(l *Like) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts Like into LikeEdge.
func (l *Like) ToEdge(order *LikeOrder) *LikeEdge {
	if order == nil {
		order = DefaultLikeOrder
	}
	return &LikeEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// RestaurantEdge is the edge representation of Restaurant.
type RestaurantEdge struct {
	Node   *Restaurant `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// RestaurantConnection is the connection containing edges to Restaurant.
type RestaurantConnection struct {
	Edges      []*RestaurantEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// RestaurantPaginateOption enables pagination customization.
type RestaurantPaginateOption func(*restaurantPager) error

// WithRestaurantOrder configures pagination ordering.
func WithRestaurantOrder(order *RestaurantOrder) RestaurantPaginateOption {
	if order == nil {
		order = DefaultRestaurantOrder
	}
	o := *order
	return func(pager *restaurantPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRestaurantOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRestaurantFilter configures pagination filter.
func WithRestaurantFilter(filter func(*RestaurantQuery) (*RestaurantQuery, error)) RestaurantPaginateOption {
	return func(pager *restaurantPager) error {
		if filter == nil {
			return errors.New("RestaurantQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type restaurantPager struct {
	order  *RestaurantOrder
	filter func(*RestaurantQuery) (*RestaurantQuery, error)
}

func newRestaurantPager(opts []RestaurantPaginateOption) (*restaurantPager, error) {
	pager := &restaurantPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRestaurantOrder
	}
	return pager, nil
}

func (p *restaurantPager) applyFilter(query *RestaurantQuery) (*RestaurantQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *restaurantPager) toCursor(r *Restaurant) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *restaurantPager) applyCursors(query *RestaurantQuery, after, before *Cursor) *RestaurantQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultRestaurantOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *restaurantPager) applyOrder(query *RestaurantQuery, reverse bool) *RestaurantQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultRestaurantOrder.Field {
		query = query.Order(direction.orderFunc(DefaultRestaurantOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Restaurant.
func (r *RestaurantQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RestaurantPaginateOption,
) (*RestaurantConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRestaurantPager(opts)
	if err != nil {
		return nil, err
	}

	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}

	conn := &RestaurantConnection{Edges: []*RestaurantEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := r.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := r.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	r = pager.applyCursors(r, after, before)
	r = pager.applyOrder(r, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		r = r.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := r.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Restaurant
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Restaurant {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Restaurant {
			return nodes[i]
		}
	}

	conn.Edges = make([]*RestaurantEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &RestaurantEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// RestaurantOrderField defines the ordering field of Restaurant.
type RestaurantOrderField struct {
	field    string
	toCursor func(*Restaurant) Cursor
}

// RestaurantOrder defines the ordering of Restaurant.
type RestaurantOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *RestaurantOrderField `json:"field"`
}

// DefaultRestaurantOrder is the default ordering of Restaurant.
var DefaultRestaurantOrder = &RestaurantOrder{
	Direction: OrderDirectionAsc,
	Field: &RestaurantOrderField{
		field: restaurant.FieldID,
		toCursor: func(r *Restaurant) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Restaurant into RestaurantEdge.
func (r *Restaurant) ToEdge(order *RestaurantOrder) *RestaurantEdge {
	if order == nil {
		order = DefaultRestaurantOrder
	}
	return &RestaurantEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}
